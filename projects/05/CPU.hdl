// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15], b=instruction[5], out=d1);
    And(a=instruction[15], b=instruction[4], out=d2);
    And(a=instruction[15], b=instruction[3], out=d3, out=writeM); // get writeM
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);

    ALU(x=xALU, y=yALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, 
        zr=zrALU, ng=ngALU, out=alu2Reg); // ALU
    
    Not(in=instruction[15], out=notMSB);
    Or(a=d1, b=notMSB, out=loadAReg);
    ARegister(in=inAReg, load=loadAReg, out=outAReg); // built-in address register

    DRegister(in=alu2Reg, load=d2, out=xALU); // built-in data register

    Mux16(a=instruction, b=alu2Reg, sel=instruction[15], out=inAReg); // choose AReg input
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=yALU); // choose ALU input

    And16(a=outAReg, b[0..15]=true, out[0..14]=addressM); // get addressM

    Not(in=zrALU, out=notzrALU);
    Not(in=ngALU, out=notngALU);
    And(a=j1, b=ngALU, out=tmp1);
    And(a=j2, b=zrALU, out=tmp2);
    And(a=j3, b=notzrALU, out=tmp31);
    And(a=tmp31, b=notngALU, out=tmp3);
    Or(a=tmp1, b=tmp2, out=tmp4);
    Or(a=tmp3, b=tmp4, out=jump);

    Not(in=jump, out=notJump);
    PC(in=outAReg, load=jump, inc=notJump, reset=reset, out[0..14]=pc); // PC
}