// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    RAM8(in=in, load=loadTmp0, address=address[0..2], out=outTmp0);
    RAM8(in=in, load=loadTmp1, address=address[0..2], out=outTmp1);
    RAM8(in=in, load=loadTmp2, address=address[0..2], out=outTmp2);
    RAM8(in=in, load=loadTmp3, address=address[0..2], out=outTmp3);
    RAM8(in=in, load=loadTmp4, address=address[0..2], out=outTmp4);
    RAM8(in=in, load=loadTmp5, address=address[0..2], out=outTmp5);
    RAM8(in=in, load=loadTmp6, address=address[0..2], out=outTmp6);
    RAM8(in=in, load=loadTmp7, address=address[0..2], out=outTmp7);

    Mux8Way16(a=outTmp0, b=outTmp1, c=outTmp2, d=outTmp3, 
              e=outTmp4, f=outTmp5, g=outTmp6, h=outTmp7, 
              sel=address[3..5], out=out);

    DMux8Way(in=load, sel=address[3..5], 
             a=loadTmp0, b=loadTmp1, c=loadTmp2, d=loadTmp3,
             e=loadTmp4, f=loadTmp5, g=loadTmp6, h=loadTmp7);

}